---
layout:     post
title:      "OpenCV学习系列（四）——矩阵的掩码操作"
subtitle:   " \"OpenCV\""
date:       2016-04-26
author:     "Leiym"
header-img: "img/post-bg-2015.jpg"
tags:
    - OpenCV
---

> 本问就将介绍图矩阵的掩码操作，以及利用矩阵掩码实现简单的图像锐化处理。

---

### 一种增强图像对比度的方法

我们可以对图像的每个像素值使用以下公式：

<img src="http://leiym.com/img/in-post/post-opencv/eq_sh.png"/>

上面那种表达法是公式的形式，而下面那种是以掩码矩阵表示的紧凑形式。使用掩码矩阵的时候，我们先把矩阵中心的元素（上面的例子中是(0,0)位置的元素，也就是5）对齐到要计算的目标像素上，再把邻域像素值和相应的矩阵元素值的乘积加起来。虽然这两种形式是完全等价的，但在大矩阵情况下，下面的形式看起来会清楚得多。

现在，我们来看看实现掩码操作的两种方法。一种方法是用基本的像素访问方法，另一种方法是用 filter2D 函数。

### 基本方法

这个方法用到了上篇博文提到的指针访问的方法，原理是获取矩阵的每第一行的指针，然后自增直至到该行末尾。

```
void Sharpen(const Mat& myImage,Mat& Result)
{
    CV_Assert(myImage.depth() == CV_8U);  // 仅接受uchar图像

    Result.create(myImage.size(),myImage.type());
    const int nChannels = myImage.channels();

    for(int j = 1 ; j < myImage.rows-1; ++j)
    {
        const uchar* previous = myImage.ptr<uchar>(j - 1);
        const uchar* current  = myImage.ptr<uchar>(j    );
        const uchar* next     = myImage.ptr<uchar>(j + 1);

        uchar* output = Result.ptr<uchar>(j);

        for(int i= nChannels;i < nChannels*(myImage.cols-1); ++i)
        {
            *output++ = saturate_cast<uchar>(5*current[i]
                         -current[i-nChannels] - current[i+nChannels] - previous[i] - next[i]);
        }
    }

    Result.row(0).setTo(Scalar(0));
    Result.row(Result.rows-1).setTo(Scalar(0));
    Result.col(0).setTo(Scalar(0));
    Result.col(Result.cols-1).setTo(Scalar(0));
}
```

下面我们来拆分这部分代码，详细地理解基本方法的实现。

```
CV_Assert(myImage.depth() == CV_8U);  // 仅接受uchar图像
```

CV_Assert 函数的作用是，当参数表达式为false时，就会抛出错误。depth 成员函数则返回了 Mat 的像素深度，即用什么类型的数据保存像素值。为了确保输入图像的像素是无符号整型类型的，这里使用到了 CV_Assert 函数，表达式中将 depth 成员函数的返回值与 CV_8U 的常量作比较。

```
Result.create(myImage.size(),myImage.type());
const int nChannels = myImage.channels();
```

这里使用了 create 函数创建了一个与输入图像尺寸类型都相同的矩阵，然后用 channels 成员函数得到了原图的通道数。

```
for(int j = 1 ; j < myImage.rows-1; ++j)
{
    const uchar* previous = myImage.ptr<uchar>(j - 1);
    const uchar* current  = myImage.ptr<uchar>(j    );
    const uchar* next     = myImage.ptr<uchar>(j + 1);

    uchar* output = Result.ptr<uchar>(j);

    for(int i= nChannels;i < nChannels*(myImage.cols-1); ++i)
    {
        *output++ = saturate_cast<uchar>(5*current[i]
                     -current[i-nChannels] - current[i+nChannels] - previous[i] - next[i]);
    }
}
```

这部分先获得了原图像矩阵每一行的头指针，然后再分别对每个通道的像素点做上述提到的加权平均计算，并把结果存放在输出图像对应的像素点。

在图像的边界上，上面给出的公式会访问不存在的像素位置（比如(0,-1)）。因此我们的公式对边界点来说是未定义的。一种简单的解决方法，是不对这些边界点使用掩码，而直接把它们设为0：

```
Result.row(0).setTo(Scalar(0));             // 上边界
Result.row(Result.rows-1).setTo(Scalar(0)); // 下边界
Result.col(0).setTo(Scalar(0));             // 左边界
Result.col(Result.cols-1).setTo(Scalar(0)); // 右边界
```

### filter2D 函数

在图像处理中，滤波器使用十分广泛， filter2D 是一个对图像做二维滤波的函数：

`CV_EXPORTS_W void filter2D( InputArray src, OutputArray dst, int ddepth, InputArray kernel, Point anchor = Point(-1,-1), double delta = 0, int borderType = BORDER_DEFAULT );`

src, dst 分别为输入和输出图像，kernel为卷积核，即对图像进行滤波的方法。

所以使用这个函数之前，需要定义一个 Mat 对象来表示卷积核。

```
Mat kern = (Mat_<char>(3,3) << 0, -1, 0,
                              -1, 5, -1,
                               0, -1, 0);
filter2D(img, sharpen_img, img.depth(), kern);
```

### 运行结果

上述两种方法结果并无差异，但运行速度则相差很多。filter2D 的速度快是因为 OpenCV 内置函数都做了优化。

图像结果：

<img src="http://leiym.com/img/in-post/post-opencv/res_sh.png"/>

---

### 后记

这部分介绍了简单的矩阵掩码操作和滤波函数 filter2D 的使用方法。
