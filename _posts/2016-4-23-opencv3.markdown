---
layout:     post
title:      "OpenCV学习系列（三）——扫描以及利用查找表处理图像"
subtitle:   " \"OpenCV\""
date:       2016-04-22
author:     "Leiym"
header-img: "img/post-bg-2015.jpg"
tags:
    - OpenCV
---

> 上篇博文介绍了读取，存储，转换颜色空间三个基本函数的用法。在图像处理中，免不了需要扫描图像以及遍历处理。普通的处理方式可能既费时，而且安全得不到保障，这篇博文就给大家介绍OpenCV中的扫描图像的方法。

---

### 图像矩阵的存储方式

首先，我们来看一下OpenCV中图像在内存的存储方式。图像矩阵的大小取决于我们所用的颜色模型，确切地说，取决于所用通道数。如果是灰度图像，矩阵就会像这样：

<img src="http://leiym.com/img/in-post/post-opencv/1ch.png"/>

而对多通道图像来说，矩阵中的列会包含多个子列，其子列个数与通道数相等。例如，RGB颜色模型的矩阵：

<img src="http://leiym.com/img/in-post/post-opencv/3ch.png"/>

**注意:** 子列的通道顺序是反过来的，如上图所示的 **BGR** 而不是RGB。很多情况下，因为内存足够大，可实现连续存储，因此，图像中的各行就能一行一行地连接起来，形成一个长行。连续存储有助于提升图像扫描速度，我们可以使用 isContinuous() 来去判断矩阵是否是连续存储的

### 测试目标以及计时工具

#### 利用查找表进行颜色空间缩减

如果矩阵元素存储的是单通道像素，使用C或C++的无符号字符类型，那么像素可有256个不同值。但若是三通道图像，这种存储格式的颜色数就有一千六百多万种。当处理图像时，这么庞大的颜色数可能会对算法造成严重影响，所以 *颜色缩减* 变得十分有意义，其中的一种方法便是 *颜色空间缩减* 。

*颜色空间缩减* ：将现有颜色空间值除以某个输入值，以获得较少的颜色数。例如，颜色值0到9可取为新值0，10到19可取为10，以此类推。

uchar （无符号字符，即0到255之间取值的数）类型的值除以 int 值，结果仍是 char 。因为结果是char类型的，所以求出来小数也要向下取整。利用这一点，刚才提到在 uchar 定义域中进行的颜色缩减运算就可以表达为下列形式：

<img src="http://leiym.com/img/in-post/post-opencv/eq1.png"/>

这样处理的缺点显而易见，当处理大图像时，每个像素点都需要进行乘除运算，效率很低。如果是使用查找表将每个颜色值对应的值都事先保存起来，然后处理时只需要读取即可。

```
int divideWith;        //缩减的倍数

stringstream s;        // 利用C++的流将输入的string类型转换为int类型
s << argv[2];
s >> divideWith;

if (!s)
{
    cout << "Invalid number entered for dividing. " << endl;
    return -1;
}

//构造查找表
uchar table[256];
for (int i = 0; i < 256; ++i)
   table[i] = divideWith* (i/divideWith);
```

#### OpenCV的计时工具

OpenCV提供了两个简便的可用于计时的函数 getTickCount() 和 getTickFrequency() 。第一个函数返回你的CPU自某个事件（如启动电脑）以来走过的时钟周期数，第二个函数返回你的CPU一秒钟所走的时钟周期数。这样，我们就能轻松地以秒为单位对某运算计时：

```C++
double t = (double)getTickCount();
// 做点什么 ...
t = ((double)getTickCount() - t)/getTickFrequency();
cout << "Times passed in seconds: " << t << endl;
```

### 测试四种不同地扫描方法

#### 1.高性能法——利用经典的C语言风格指针

思路是：获取了每一行开始处的指针，然后遍历至该行末尾。如果矩阵是以连续方式存储的，那么只需请求一次指针、然后一直遍历到结尾即可。注意：彩色图像有三个通道，扫描时需要遍历的元素数目也是单通道的3倍。

```
Mat& ScanImageAndReduceC(Mat& I, const uchar* const table)
{
    // 只接收char类型的矩阵
    CV_Assert(I.depth() != sizeof(uchar));     

    int channels = I.channels();

    int nRows = I.rows * channels;
    int nCols = I.cols;

    if (I.isContinuous())      //判断是否连续存储
    {
        nCols *= nRows;
        nRows = 1;         
    }

    int i,j;
    uchar* p;
    for( i = 0; i < nRows; ++i)
    {
        p = I.ptr<uchar>(i);
        for ( j = 0; j < nCols; ++j)
        {
            p[j] = table[p[j]];             
        }
    }
    return I;
}
```

我们还可以使用 *data* 来获取矩阵第一行第一列的指针，这种方法常用来检查图像是否被成功读入。不过这种方法易读性差，并且不方便进行后续处理。示例如下：

```
uchar* p = I.data;

for( unsigned int i =0; i < ncol*nrows; ++i)
    *p++ = table[*p];
```

#### 2.迭代法

在迭代法中，需要做的仅仅是获得图像矩阵的begin和end，然后增加迭代直至从begin到end。将*操作符添加在迭代指针前，即可访问当前指向的内容。

```
Mat& ScanImageAndReduceIterator(Mat& I, const uchar* const table)
{
    // 只接收char类型的矩阵
    CV_Assert(I.depth() != sizeof(uchar));     

    const int channels = I.channels();
    switch(channels)
    {
    case 1:
        {
            MatIterator_<uchar> it, end;
            for( it = I.begin<uchar>(), end = I.end<uchar>(); it != end; ++it)
                *it = table[*it];
            break;
        }
    case 3:
        {
            MatIterator_<Vec3b> it, end;
            for( it = I.begin<Vec3b>(), end = I.end<Vec3b>(); it != end; ++it)
            {
                (*it)[0] = table[(*it)[0]];
                (*it)[1] = table[(*it)[1]];
                (*it)[2] = table[(*it)[2]];
            }
        }
    }

    return I;
}
```

当通道数为1时，我们创建一个 *uchar* 模板的迭代器 *MatIterator_* ；当通道数为3时，我们用 *Vec3b* 来创建。 *Vec3b* 表示的是三个字节构成的vector，相当于包含了3个uchar的vector。

**注意：** 如果在彩色图像中，仅使用 *uchar* 的迭代器遍历时，只会访问到蓝色通道（B）的值。

#### 3.On the fly方法（动态方法）

这种方法利用 Mat 类的 *at* 函数，at函数能够动态的访问任意行任意列的值，它本来是被用于获取或更改图像中的随机元素。

```
Mat& ScanImageAndReduceRandomAccess(Mat& I, const uchar* const table)
{
    // accept only char type matrices
    CV_Assert(I.depth() != sizeof(uchar));     

    const int channels = I.channels();
    switch(channels)
    {
    case 1:
        {
            for( int i = 0; i < I.rows; ++i)
                for( int j = 0; j < I.cols; ++j )
                    I.at<uchar>(i,j) = table[I.at<uchar>(i,j)];
            break;
        }
    case 3:
        {
         Mat_<Vec3b> _I = I;

         for( int i = 0; i < I.rows; ++i)
            for( int j = 0; j < I.cols; ++j )
               {
                   _I(i,j)[0] = table[_I(i,j)[0]];
                   _I(i,j)[1] = table[_I(i,j)[1]];
                   _I(i,j)[2] = table[_I(i,j)[2]];
            }
         I = _I;
         break;
        }
    }

    return I;
}
```

*at* 函数输入为数据类型及需求元素的坐标，返回的是一个对应的值。如果用 get 则是constant，如果是用 set 、则为non-constant。当且仅当在 **debug** 模式下，它才会检查你的输入坐标是否有效或者超出范围。如果坐标有误，则会输出一个标准的错误信息。和高性能法相比, 在release模式下，它们之间的区别仅仅是对于图像矩阵的每个元素，本方法都会获取一个新的行指针，并通过该指针和[]操作来获取列元素。

#### 4.核心函数LUT

最后一种方法是使用OpenCV中的内置函数LUT（look-up table），函数声明如下：

`CV_EXPORTS_W void LUT(InputArray src, InputArray lut, OutputArray dst);`

*src* 为输入图像数据，*dst* 为输出图像数据，*lut* 为查找表。这里，我们用Mat来定义一个查找表。

```
Mat lookUpTable(1, 256, CV_8U);            //Mat型查找表
uchar* p = lookUpTable.data;               //利用指针建立查找表
for( int i = 0; i < 256; ++i)
    p[i] = table[i];
```

### 测试结果及比较

为了获得更为精准的比较，我用了一张大图像（1920 x 1200），并且分别进行了100次测试。首先来看下原图与颜色缩减之后的对比：

**注**:显示图像时为了让效果明显，我将缩减值设为了100。

<img src="http://leiym.com/img/in-post/post-opencv/source.jpg"/>

<img src="http://leiym.com/img/in-post/post-opencv/reduce.jpg"/>

**注**:对比运行时间时为了让处理更复杂，不同方法时间差距更大，我将缩减值设为了10。

```
Time of reducing with the C operator [] (averaged for 100 runs): 20.0808 milliseconds.

Time of reducing with the iterator (averaged for 100 runs): 82.2931 milliseconds.

Time of reducing with the on-the-fly address generation - at function (averaged for 100 runs): 93.3516 milliseconds.

Time of reducing with the LUT function (averaged for 100 runs): 4.81423 milliseconds.

```

可以看到，C语言风格的指针方法相当快，达到了20ms，迭代器和动态方法时间类似，但OpenCV的内置函数LUT达到了令人发指的 **4ms**！！！

我们得出一些结论: 尽量使用 OpenCV 内置函数。调用 **LUT** 函数可以获得最快的速度。 这是因为OpenCV库可以通过英特尔线程架构启用多线程。当然,如果你喜欢使用指针的方法来扫描图像，迭代法是一个不错的选择，不过速度上较慢。在debug模式下使用on-the-fly方法扫描全图是一个最浪费资源的方法，在release模式下它的表现和迭代法相差无几，但是从安全性角度来考虑，迭代法是更佳的选择。

---
### 后记

这篇博文介绍了四种不同的扫描图像方法，并进行了运行时间对比。另一方面则介绍了处理图像时的查找表基本思想，以及实用的精准计时函数。
