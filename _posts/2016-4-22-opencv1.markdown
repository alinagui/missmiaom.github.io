---
layout:     post
title:      "OpenCV学习系列（一）——Mat"
subtitle:   " \"OpenCV\""
date:       2016-04-22
author:     "Leiym"
header-img: "img/post-bg-2015.jpg"
tags:
    - OpenCV
---

> 开个新坑，开始OpenCV的学习系列，在这个系列中，首先我会根据opencv中文社区的教程走，并在其中添加自己的理解以及实践。希望能借助这个开源工具了解图像处理领域的基础知识体系，并利用其帮助开发一些使用的视觉项目。

---

### *Mat* ——图像的基本容器

首先，OpenCV中最常用的容器便是Mat，Mat是一个结合了C++特性的并且非常方便的一个容器类，用来存放图像矩阵。它由两部分组成，一是矩阵头，包含矩阵尺寸，存储方法，存储地址等信息；二是一个指向存储所有像素值的矩阵的指针。

Mat最大的优点是OpenCV的 **计数机制**，其思路是让每个 *Mat* 对象有自己的信息头，但共享同一个矩阵。这通过让矩阵指针指向同一地址而实现。而拷贝构造函数则 **只拷贝信息头和矩阵指针** ，而不拷贝矩阵。这个特性其实就是利用共享指针省去了大数据量之间的拷贝，这一点在用OpenCV处理大图像时显得尤为重要。

当一个属于多个 *Mat* 对象的矩阵完成任务之后，最后一个使用该矩阵的对象完成对其的清理，这个功能由计数机制实现。不论什么时候有人拷贝了一个 *Mat* 对象的信息头，都会增加矩阵的引用次数；反之当一个头被释放之后，这个计数被减一；当计数值为零，矩阵会被清理。当你想拷贝矩阵本身(不只是信息头和矩阵指针)时，可以使用函数 clone() 或者 copyTo() 。


总结一下OpenCV中的内存机制特性：

* OpenCV函数中输出图像的内存分配是自动完成的（如果不特别指定的话）。

* 使用OpenCV的C++接口时不需要考虑内存释放问题。

* 赋值运算符和拷贝构造函数（ ctor ）只拷贝信息头。

* 使用函数 clone() 或者 copyTo() 来拷贝一副图像的矩阵。


### 显示地创建 *Mat* 对象

#### *Mat* 构造函数：

`Mat::Mat(int _rows, int _cols, int _type, const Scalar& _s)`

例如：

```
Mat M(2,2, CV_8UC3, Scalar(0,0,255));
```

首先要定义其尺寸，即行数和列数。然后，指定存储元素的数据类型以及每个矩阵点的通道数。 Scalar 是个short型vector。指定这个能够使用指定的定制化值来初始化矩阵。这里的参数_type含义为：

`CV_[The number of bits per item][Signed or Unsigned][Type Prefix]C[The channel number]
`

比如 *CV_8UC3* 表示使用8位的 unsigned char 型，每个像素由三个元素组成三通道。预先定义的通道数可以多达四个。

当创建的Mat维数超过2时，则需要传递一个整型数组的指针，来指定每一维的尺寸，如：

```
int sz[3] = {2,2,2};
Mat L(3,sz, CV_8UC(1), Scalar::all(0));
```

#### 为已存在IplImage指针创建信息头

```
IplImage* img = cvLoadImage("greatwave.png", 1);
Mat mtx(img); // convert IplImage* -> Mat
```


#### Create()函数

```
   M.create(4,4, CV_8UC(2));
```

这种创建方法不能为矩阵设初值，它只是在改变尺寸时重新为矩阵数据开辟内存。

#### 使用 clone() 或者 copyTo() 从一个存在的 *Mat* 对象中创建一个新对象

```
Mat C(2,2, CV_8UC3, Scalar(0,0,255));
Mat RowClone = C.row(1).clone();
```

这里的 RowClone 对象获得的是 C 对象所指向的矩阵的第一列，注意 *Mat* 对象的 row() 或者 col() 函数返回类型的也是 *Mat* 。

### 格式化打印

#### 默认方式

```
cout << endl << R << endl;
```

#### Python

```
cout << format(R,"python") << endl;
```

---

### 后记

Mat 的最大的亮点即是利用计数机制来管理申请的内存。
